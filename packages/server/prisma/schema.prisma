// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  address       String          @id
  NativeBalance NativeBalance[]
  ERC20Balance  ERC20Balance[]
}

model Network {
  chainId       Int             @id
  alias         String
  name          String
  NativeBalance NativeBalance[]
  ERC20Balance  ERC20Balance[]
}

model NativeBalance {
  id             Int     @id @default(autoincrement())
  balance        Decimal @db.Decimal(78, 0)
  Account        Account @relation(fields: [accountAddress], references: [address])
  accountAddress String
  Network        Network @relation(fields: [networkChainId], references: [chainId])
  networkChainId Int

  @@unique([accountAddress, networkChainId])
}

model ERC20Balance {
  id Int @id @default(autoincrement())

  balance         Decimal @db.Decimal(78, 0)
  symbol          String
  contractAddress String
  Account         Account @relation(fields: [accountAddress], references: [address])
  accountAddress  String
  Network         Network @relation(fields: [networkChainId], references: [chainId])
  networkChainId  Int

  @@unique([contractAddress, accountAddress, networkChainId])
}

model TransferTask {
  id               Int        @id @default(autoincrement())
  status           TaskStatus
  fromChain        Int
  toChain          Int
  fromTokenAddress String     @db.Char(42)
  toTokenAddress   String     @db.Char(42)
  fromTokenAmount  Decimal
  createdAt        DateTime   @default(now())
  FromTxHash       String?
  ToTxHash         String?
}

enum TaskStatus {
  Queue
  TriggerSent
  Pending
  Failed
  WaitForStateRoot
  ReadyToProve
  ProveSent
  WaitForChallenge
  ReadyToWithdraw
  WithdrawSent
  Success
  Cancelled
}

model DepositEvent {
  id              Int      @id @default(autoincrement())
  chainId         Int
  l1Token         String   @db.Char(42)
  l2Token         String   @db.Char(42)
  from            String   @db.Char(42)
  to              String   @db.Char(42)
  amount          String
  data            String
  blockNumber     Int
  transactionHash String
  createdAt       DateTime @default(now())

  @@index([l1Token])
  @@index([l2Token])
  @@index([from])
  @@index([to])
  @@index([blockNumber])
}
